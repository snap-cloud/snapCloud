# These are the rules and paths to the Snap! IDE.
# Extracted as a file so snap.berkeley and extensions.snap can have the same setup.

###### Snap! IDEs ######
# These are all the locations you can get to the Snap! IDE.
# They all should work as paths or directories (optional /).
# We separate the optional end /, so that /snapp or other routes
# that start with /snap... but aren't the IDE will still resolve.
location ~ ^/snap$ {
    return 301 /snap/;
}

location /snap/ {
    gzip on;
    gzip_min_length 1000;
    gzip_types *;
    sub_filter <head> $cloud_loc;
    etag on;
    # Disable the access log for all Snap! requests, except the IDE.
    access_log off;
    alias snap/;

    location ~* (\.html|sw.js)$ {
        access_log logs/access.log main_ext if=$should_log;
        add_header Cache-Control 'no-cache, max-age=0, no-store';
        expires -1;
    }

    # Simple redirects.
    location /snap/dev {
        return 301 /versions/dev/;
    }

    location /snap/previous {
        return 301 /versions/previous/;
    }
}

location /versions/ {
    gzip on;
    gzip_min_length 1000;
    gzip_types *;
    sub_filter <head> $cloud_loc;
    access_log off;
    etag on;

    location ~* (\.html|sw.js)$ {
        access_log logs/access.log main_ext if=$should_log;
        add_header Cache-Control 'no-cache, max-age=0, no-store';
        expires -1;
    }

    # TODO: Consider building a page here...
    alias snap-versions/;
}

# These are important "legacy" routes that we need to maintain.
# /run, /snapsource/, /snapsource/dev, /snapsource/stable
# Note the old "/init" that was used to load tools has been removed.

location /run {
    return 301 /snap/snap.html$is_args$query_string;
}

location /snapsource {
    return 301 /snap/$is_args$query_string;
}

location /snapsource/dev {
    return 301 /versions/dev/$is_args$query_string;
}

location /snapsource/stable {
    return 301 /versions/previous/$is_args$query_string;
}
