#! /usr/bin/env bash

# ./deploy [BRANCH]

# Allow specifcying a branch or commit to deploy.
branch=${1-'master'}

echo "Deploying branch: $branch"

# Deploy a copy of snapCloud
pushd ~/snapCloud/ > /dev/null;

git checkout $branch
git pull origin $branch
# Always init, just incase we add a submodule.
git submodule init
git submodule update --recursive --remote

pushd ~/snapCloud/bin/;

./renew-certs
./deploy-certs
./update-snap


# echo "Updating Dependencies:"
# luarocks install snap-cloud-beta-0.rockspec

echo;
echo;

source .env
deploy_sha=$(git rev-parse HEAD)

# Create a release on GitHub
# A modified ISO8601 format. GitHub does not support tags
current_time=$(date -u +"%Y-%m-%dT%H-%M-%S")
repo='https://api.github.com/repos/snap-cloud/snapCloud/releases'
# tag non-production releases as 'prerelase'
prelease=$(if [ "$LAPIS_ENVIRONMENT" = 'production' ]; then echo 'false'; else echo 'true'; fi)
curl -X POST -H "Content-Type:application/json" -u cycomachead:$GITHUB_TOKEN $repo -d "{\"tag_name\": \"$current_time\", \"target_commitish\": \"$deploy_sha\", \"prerelease\": $prelease}"

echo

echo 'Tagging Deploy in Sentry'
curl https://sentry.io/api/0/organizations/snapcloud/releases/ \
 -H "Authorization: Bearer $SENTRY_API_TOKEN" \
 -H 'Content-Type: application/json' \
 -d "{\"version\":\"$current_time\",\"ref\":\"$deploy_sha\",\"projects\":[\"snapcloud-server\"]}"


curl https://sentry.io/api/0/organizations/snapcloud/releases/$current_time/deploys/ \
 -H "Authorization: Bearer $SENTRY_API_TOKEN" \
 -H 'Content-Type: application/json' \
 -d "{\"environment\":\"$LAPIS_ENVIRONMENT\"}"

echo
echo

echo "Notifiying Slack"

curl -XPOST https://hooks.slack.com/workflows/T02BLN36L/A01PUMAEUPR/344588914394149899/$SLACK_KEY \
 -H 'Content-Type: application/json' \
 -d "{\"message\":\"Deployed Snap! to $LAPIS_ENVIRONMENT at $current_time\"}"


# Always update the letsencrypt script incase it changes.
cp ./deploy-certs ../lets-encrypt/renewal-hooks/deploy/1-deploy.sh

# The cloud user only has the ability to restart this service.
echo 'Restarting snapcloud daemon'
sudo service snapcloud_daemon restart

popd > /dev/null;

echo 'Done!'
