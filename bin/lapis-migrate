#! /usr/bin/env bash
# Wrap `lapis migrate` to ensure we always dump the current schema to the $SCHEMA_FILE

source .env

# TODO: We should standardize the table names with the environment.. oh well.
APP_NAME='snapcloud'
DATABASE_NAME="${APP_NAME}_${LAPIS_ENVIRONMENT}";
DB_USER="${DATABASE_USER:-$USER}";
DB_HOST="${DATABASE_HOST:-localhost}";
SCHEMA_FILE="db/schema.sql";

if psql -lqt | cut -d \| -f 1 | grep -qw $DATABASE_NAME; then
  echo "$DATABASE_NAME exists. Continuing...";
else
  echo "No $DATABSE_NAME found. Creating a new DB...";
  createdb $DATABASE_NAME;
  db/init.sh;
fi

# TODO: lapis migrate --dry-run then ask for confirmation.
lapis migrate
success=$?

# We filter extra lines that pg_dump adds that add churn to the schema file.
# pg_dump doesn't have an option to disable the restrict/unrestrict lines.
# And when dumping the migrations table, we don't want any of the SET lines or comments
# (which are redundant since we are appending to an existing file).
# This leaves only one line at the top which includes the pg_dump version.
if [[ $LAPIS_ENVIRONMENT == 'development' && $success == 0 ]]
then
  CONNECTION="-h $DB_HOST -U $DB_USER -d $DATABASE_NAME --no-owner --no-privileges";
  echo "Dumping schema to $SCHEMA_FILE";
  pg_dump --schema-only $CONNECTION \
    | grep -v '\\restrict' \
    | grep -v '\\unrestrict' \
    | grep -v '^-- Dumped by ' > $SCHEMA_FILE;
  pg_dump --data-only --table=lapis_migrations $CONNECTION \
    | grep -v '\\restrict' \
    | grep -v '\\unrestrict' \
    | grep -v "^--" \
    | grep -v "^SET*" >> $SCHEMA_FILE;
fi
